# handlers/user_handlers.py

import logging
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.database import Database as DB
from handlers.admin_handlers import send_submission_to_admin  # –ï—Å–ª–∏ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è

from keyboards.inline import get_start_keyboard, get_cancel_keyboard

router = Router()

logger = logging.getLogger(__name__)


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class SubmissionStates(StatesGroup):
    waiting_for_collection_photo = State()
    waiting_for_receipt_photo = State()
    waiting_for_full_name = State()  # –ï—Å–ª–∏ —ç—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
    waiting_for_address = State()  # –ï—Å–ª–∏ —ç—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
    waiting_for_phone_number = State()  # –ï—Å–ª–∏ —ç—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø—Ä–∏–∑–æ–≤ –æ—Ç ChocoWow, "
        "—Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é ChocoWow –∏–≥—Ä—É—à–µ–∫ "
        "–∏ —á–µ–∫–∏ –æ –ø–æ–∫—É–ø–∫–µ.\n\n"
        "–ù–∞–∂–º–∏ '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É' –¥–ª—è –Ω–∞—á–∞–ª–∞:",
        reply_markup=get_start_keyboard()
    )


@router.callback_query(F.data == "submit_application")
async def start_submission(callback: CallbackQuery, state: FSMContext):
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —Å–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ChocoWow –∏–≥—Ä—É—à–µ–∫.",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(SubmissionStates.waiting_for_collection_photo)


@router.message(SubmissionStates.waiting_for_collection_photo, F.photo)
async def process_collection_photo(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    await state.update_data(collection_photo_id=photo_id)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —á–µ–∫–æ–≤, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏—Ö –ø–æ–∫—É–ø–∫—É ChocoWow.",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(SubmissionStates.waiting_for_receipt_photo)


@router.message(SubmissionStates.waiting_for_collection_photo, ~F.photo)
async def process_collection_photo_invalid(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.")


@router.message(SubmissionStates.waiting_for_receipt_photo, F.photo)
async def process_receipt_photo(message: Message, state: FSMContext, bot: Bot, db_instance: DB):
    receipt_photo_id = message.photo[-1].file_id
    user_data = await state.get_data()
    collection_photo_id = user_data.get("collection_photo_id")

    user_id = message.from_user.id
    username = message.from_user.username if message.from_user.username else f"id_{user_id}"

    try:
        submission_id = await db_instance.add_submission(
            user_id, username, collection_photo_id, receipt_photo_id
        )
        await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        await state.clear()

        await send_submission_to_admin(
            bot=bot,
            submission_id=submission_id,
            user_id=user_id,
            username=username,
            collection_photo=collection_photo_id,
            receipt_photo=receipt_photo_id
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /start")
        await state.clear()


@router.message(SubmissionStates.waiting_for_receipt_photo, ~F.photo)
async def process_receipt_photo_invalid(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ–∫–æ–≤.")


@router.callback_query(F.data == "cancel_submission", F.state.in_(
    [SubmissionStates.waiting_for_collection_photo, SubmissionStates.waiting_for_receipt_photo]))
async def cancel_submission_process(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=True)
    await state.clear()
    await callback.message.edit_text(
        "–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É'.",
        reply_markup=get_start_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel
@router.message(Command("cancel"), F.state.in_(
    [SubmissionStates.waiting_for_collection_photo, SubmissionStates.waiting_for_receipt_photo]))
async def cmd_cancel_submission(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É'.",
        reply_markup=get_start_keyboard()
    )