# handlers/user_handlers.py

import logging
import asyncio
from aiogram import Router, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, ContentType, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from database.database import Database as DB
from keyboards.inline import get_start_keyboard, get_confirmation_keyboard, get_restart_keyboard
from keyboards.reply import get_done_keyboard
from states import SubmissionFSM

router = Router()
logger = logging.getLogger(__name__)


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext, db_instance: DB):
    await state.clear()
    user_exists = await db_instance.check_user_exists(message.from_user.id)
    if user_exists:
        await message.answer(
            "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–≤–æ—é –∑–∞—è–≤–∫—É. –•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ—ë –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ?",
            reply_markup=get_restart_keyboard()
        )
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞ ChocoWow.\n\n"
            "–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø—Ä–∏–∑–æ–≤, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=get_start_keyboard()
        )


@router.callback_query(F.data == "start_submission")
async def start_submission(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete()
    await callback.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –±–µ–≥–µ–º–æ—Ç–∏–∫–æ–≤. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ.\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=get_done_keyboard()
    )
    await state.set_state(SubmissionFSM.uploading_collection)
    await state.update_data(collection_photos=[])


@router.message(SubmissionFSM.uploading_collection, F.photo)
async def process_collection_photo(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    user_data = await state.get_data()
    user_data['collection_photos'].append(photo_id)
    await state.update_data(collection_photos=user_data['collection_photos'])

    sent_message = await message.answer("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ì–æ—Ç–æ–≤–æ'.")
    await asyncio.sleep(3)
    await sent_message.delete()


@router.message(SubmissionFSM.uploading_collection, F.text == "–ì–æ—Ç–æ–≤–æ")
async def finish_collection_upload(message: Message, state: FSMContext):
    user_data = await state.get_data()
    if not user_data.get('collection_photos'):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.")
        return

    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤—ã—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ PDF-—Ñ–∞–π–ª—ã —á–µ–∫–æ–≤ –Ω–∞ Choco Wow.\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=get_done_keyboard()
    )
    await state.set_state(SubmissionFSM.uploading_receipts)
    await state.update_data(receipt_files=[])


@router.message(SubmissionFSM.uploading_receipts, F.content_type.in_({ContentType.PHOTO, ContentType.DOCUMENT}))
async def process_receipt_file(message: Message, state: FSMContext):
    if message.photo:
        file_id = message.photo[-1].file_id
    elif message.document and 'pdf' in message.document.mime_type:
        file_id = message.document.file_id
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ PDF —Ñ–∞–π–ª.")
        return

    user_data = await state.get_data()
    user_data.get('receipt_files', []).append(file_id)
    await state.update_data(receipt_files=user_data.get('receipt_files'))

    sent_message = await message.answer("–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω. –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ì–æ—Ç–æ–≤–æ'.")
    await asyncio.sleep(3)
    await sent_message.delete()


@router.message(SubmissionFSM.uploading_receipts, F.text == "–ì–æ—Ç–æ–≤–æ")
async def finish_receipts_upload(message: Message, state: FSMContext):
    user_data = await state.get_data()
    if not user_data.get('receipt_files'):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª (—Ñ–æ—Ç–æ –∏–ª–∏ PDF) —Å —á–µ–∫–æ–º.")
        return

    collection_count = len(user_data.get("collection_photos", []))
    receipt_count = len(user_data.get("receipt_files", []))

    wait_message = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", reply_markup=ReplyKeyboardRemove())

    await message.answer(
        f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
        f"–§–æ—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {collection_count} —à—Ç.\n"
        f"–§–∞–π–ª—ã —á–µ–∫–æ–≤: {receipt_count} —à—Ç.\n\n"
        f"<b>–í—Å–µ –≤–µ—Ä–Ω–æ?</b>",
        reply_markup=get_confirmation_keyboard()
    )
    await wait_message.delete()
    await state.set_state(SubmissionFSM.confirmation)


@router.callback_query(SubmissionFSM.confirmation, F.data == "confirm_yes")
async def submission_confirmed(callback: CallbackQuery, state: FSMContext, bot: Bot, db_instance: DB):
    await callback.answer("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—à—É –∑–∞—è–≤–∫—É...")
    await callback.message.edit_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    user_data = await state.get_data()
    user_id = callback.from_user.id
    username = callback.from_user.username if callback.from_user.username else f"id_{user_id}"

    try:
        submission_id = await db_instance.add_submission(
            user_id=user_id,
            username=username,
            collection_photos=user_data["collection_photos"],
            receipt_files=user_data["receipt_files"]
        )
        await bot.send_message(user_id,
                               "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–∫–∏.")

        from handlers.admin_handlers import send_submission_to_admin

        await send_submission_to_admin(
            bot=bot,
            submission_id=submission_id,
            user_id=user_id,
            username=username,
            collection_photos=user_data["collection_photos"],
            receipt_files=user_data["receipt_files"],
            db_instance=db_instance
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await bot.send_message(user_id,
                               "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /start")
    finally:
        await state.clear()


@router.callback_query(SubmissionFSM.confirmation, F.data == "confirm_no")
async def submission_declined(callback: CallbackQuery, state: FSMContext, db_instance: DB):
    await callback.answer("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.", show_alert=True)
    await state.clear()
    await callback.message.delete()
    await cmd_start(callback.message, state, db_instance)