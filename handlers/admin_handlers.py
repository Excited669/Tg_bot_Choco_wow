import asyncio
import logging
from aiogram import Router, F, Bot
from aiogram.filters import Command, BaseFilter, StateFilter
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, BufferedInputFile
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from datetime import datetime

from config import ADMIN_IDS
from database.database import Database as DB
from keyboards.inline import get_admin_keyboard, get_rejection_keyboard
from utils.email_sender import send_email_with_files
from utils.export_data import generate_participants_csv
from states import AdminFSM

router = Router()
logger = logging.getLogger(__name__)


class IsAdmin(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id in ADMIN_IDS


async def send_submission_to_admin(bot: Bot, submission_id: int, user_id: int, username: str,
                                   collection_photos: list[str], receipt_files: list[str]):
    caption = (
        f"üî• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{submission_id}\n"
        f"–û—Ç: @{username} (ID: {user_id})"
    )
    keyboard = get_admin_keyboard(submission_id, user_id)
    all_files = collection_photos + receipt_files

    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, caption)

            photo_media_group = []
            for photo_id in collection_photos:
                photo_media_group.append(InputMediaPhoto(media=photo_id))

            if photo_media_group:
                # Split into chunks of 10 for media group limit
                for i in range(0, len(photo_media_group), 10):
                    await bot.send_media_group(admin_id, media=photo_media_group[i:i + 10])

            # Send receipt files (can be photo or pdf)
            for file_id in receipt_files:
                try:
                    file_info = await bot.get_file(file_id)
                    if file_info.file_path.endswith('.pdf'):
                        await bot.send_document(admin_id, document=file_id, caption="üìÑ –ß–µ–∫ (PDF)")
                    else:
                        await bot.send_photo(admin_id, photo=file_id, caption="üìÑ –ß–µ–∫ (–§–æ—Ç–æ)")
                except Exception as e:
                    logger.error(f"Could not send file {file_id} to admin {admin_id}: {e}")

            await bot.send_message(admin_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    await send_email_with_files(
        bot=bot,
        caption=f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{submission_id} –æ—Ç @{username} (ID: {user_id})",
        file_ids=all_files
    )


@router.callback_query(F.data.startswith("admin:"))
async def process_admin_action(callback: CallbackQuery, bot: Bot, db_instance: DB, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return

    _, action, sub_id_str, user_id_str = callback.data.split(":")
    submission_id = int(sub_id_str)
    user_id = int(user_id_str)

    if action == "reject":
        await callback.answer()
        await state.update_data(submission_id=submission_id, user_id=user_id,
                                admin_message_id=callback.message.message_id)
        await state.set_state(AdminFSM.reject_reason)
        await callback.message.edit_text(
            f"–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É ‚Ññ{submission_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}?\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã.",
            reply_markup=get_rejection_keyboard()
        )
        return

    await callback.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

    actions = {
        "approve": ("approved", "–í—ã —Å—Ç–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ!"),
        "bonus": ("bonus",
                  "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏–∑! –ü—Ä–æ—Å—å–±–∞ —É—Ç–æ—á–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: –ê–¥—Ä–µ—Å, –§–ò–û, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    }

    if action in actions:
        status, text_for_user = actions[action]
        await db_instance.update_status(user_id, status)
        try:
            await bot.send_message(user_id, text_for_user)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await bot.send_message(callback.from_user.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        status_text = {"approve": "‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê", "bonus": "üéÅ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê –° –ë–û–ù–£–°–û–ú"}
        try:
            # Edit original message with action buttons
            original_message_with_buttons = callback.message
            await original_message_with_buttons.edit_reply_markup(reply_markup=None)
            await bot.edit_message_text(
                text=f"–ó–∞—è–≤–∫–∞ ‚Ññ{submission_id} {status_text[action]}.",
                chat_id=callback.from_user.id,
                message_id=original_message_with_buttons.message_id - 1,
                # Assumes caption is the message before keyboard
            )

        except Exception as e:
            logger.warning(f"Could not edit admin message for submission {submission_id}: {e}")
            await callback.message.edit_text(f"–ó–∞—è–≤–∫–∞ ‚Ññ{submission_id} {status_text[action]}.")


@router.message(AdminFSM.reject_reason, F.text)
async def process_rejection_reason(message: Message, state: FSMContext, bot: Bot, db_instance: DB):
    reason = message.text
    data = await state.get_data()
    user_id = data['user_id']
    submission_id = data['submission_id']
    admin_message_id = data['admin_message_id']

    await db_instance.update_status(user_id, "rejected")
    rejection_message = (
        "–û–π, –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.\n\n"
        f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n\n"
        "–ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞—á–∞–≤ —Å –∫–æ–º–∞–Ω–¥—ã /start."
    )
    try:
        await bot.send_message(user_id, rejection_message)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ –ø—Ä–∏—á–∏–Ω–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {e}")

    await message.bot.edit_message_text(
        f"‚ùå –ó–∞—è–≤–∫–∞ ‚Ññ{submission_id} –û–¢–ö–õ–û–ù–ï–ù–ê. –ü—Ä–∏—á–∏–Ω–∞ —É–∫–∞–∑–∞–Ω–∞.",
        chat_id=message.from_user.id,
        message_id=admin_message_id,
        reply_markup=None
    )
    await state.clear()


@router.callback_query(AdminFSM.reject_reason, F.data == "reject_no_reason")
async def process_rejection_no_reason(callback: CallbackQuery, state: FSMContext, bot: Bot, db_instance: DB):
    await callback.answer()
    data = await state.get_data()
    user_id = data['user_id']
    submission_id = data['submission_id']

    await db_instance.update_status(user_id, "rejected")
    rejection_message = "–û–π, –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–æ—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ —á–µ–∫–æ–≤ –±—ã–ª–∏ –Ω–µ—á–µ—Ç–∫–∏–º–∏. –ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞—á–∞–≤ —Å –∫–æ–º–∞–Ω–¥—ã /start."
    try:
        await bot.send_message(user_id, rejection_message)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")

    await callback.message.edit_text(
        f"‚ùå –ó–∞—è–≤–∫–∞ ‚Ññ{submission_id} –û–¢–ö–õ–û–ù–ï–ù–ê. –ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã.",
        reply_markup=None
    )
    await state.clear()


@router.message(Command("get_users_db"), IsAdmin())
async def cmd_get_users_db(message: Message, bot: Bot, db_instance: DB):
    await message.answer("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    try:
        column_names, rows = await db_instance.get_all_participants_data()
        if not rows:
            await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
            return

        csv_buffer = await generate_participants_csv(column_names, rows, bot)
        filename_timestamp = datetime.now().strftime("%d.%m.%Y_%H:%M")
        file_name = f"database_chocowow_{filename_timestamp}.csv"

        await bot.send_document(
            chat_id=message.chat.id,
            document=BufferedInputFile(csv_buffer.getvalue(), filename=file_name),
            caption="–í–æ—Ç –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:"
        )
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {e}")


@router.message(Command("send_raffle_reminder"), IsAdmin())
async def cmd_send_raffle_reminder(message: Message, bot: Bot, db_instance: DB):
    users = await db_instance.get_approved_users()
    text = "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–π–¥–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à –ø—Ä–∏–∑–æ–≤! üèÜ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º —Ç–≥ –∫–∞–Ω–∞–ª–µ ______"
    count = 0
    await message.answer(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    for user_id in users:
        try:
            await bot.send_message(user_id, text)
            count += 1
            await asyncio.sleep(0.1)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π.")


@router.message(Command("send_results"), IsAdmin())
async def cmd_send_results(message: Message, bot: Bot, db_instance: DB, command: Command):
    # command.args will contain the text after the command, e.g., the link
    results_link = command.args
    if not results_link:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. \n–ü—Ä–∏–º–µ—Ä: `/send_results https://t.me/your_channel/123`")
        return

    users = await db_instance.get_approved_users()
    text = f"–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ —Å—Å—ã–ª–∫–µ: {results_link}"
    count = 0
    await message.answer(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    for user_id in users:
        try:
            await bot.send_message(user_id, text)
            count += 1
            await asyncio.sleep(0.1)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π.")