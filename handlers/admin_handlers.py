# handlers/admin_handlers.py

import asyncio
import logging
from datetime import datetime
from aiogram import Router, F, Bot
from aiogram.filters import Command, BaseFilter, StateFilter, CommandObject
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, BufferedInputFile
from aiogram.fsm.context import FSMContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from config import MAIN_ADMIN_ID
from database.database import Database as DB
from keyboards.inline import get_admin_keyboard, get_rejection_keyboard, get_schedule_keyboard
from utils.email_sender import send_email_with_files
from utils.export_data import generate_participants_csv
from states import AdminFSM

router = Router()
logger = logging.getLogger(__name__)


# --- –§–∏–ª—å—Ç—Ä—ã –¥–æ—Å—Ç—É–ø–∞ ---
class IsAdmin(BaseFilter):
    async def __call__(self, message: Message | CallbackQuery, db_instance: DB) -> bool:
        all_admins = await db_instance.get_all_admins()
        all_admins.append(MAIN_ADMIN_ID)
        return message.from_user.id in all_admins


class IsMainAdmin(BaseFilter):
    async def __call__(self, message: Message, db_instance: DB) -> bool:
        return message.from_user.id == MAIN_ADMIN_ID


# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∞–º ---
async def send_submission_to_admin(bot: Bot, submission_id: int, user_id: int, username: str,
                                   collection_photos: list[str], receipt_files: list[str], db_instance: DB):
    admin_ids = await db_instance.get_all_admins()
    if MAIN_ADMIN_ID not in admin_ids:
        admin_ids.append(MAIN_ADMIN_ID)

    caption = (
        f"üö® –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ü–†–û–í–ï–†–ö–£! üö®\n\n"
        f"<b>User ID:</b> {user_id}\n"
        f"<b>Username:</b> @{username}\n\n"
        f"–í—Å–µ —Ñ–æ—Ç–æ, –∞ —Ç–∞–∫–∂–µ email, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–æ—á—Ç—É."
    )
    keyboard = get_admin_keyboard(submission_id, user_id)
    all_files = collection_photos + receipt_files

    for admin_id in admin_ids:
        try:
            await bot.send_message(admin_id, caption)

            photo_media_group = [InputMediaPhoto(media=photo_id) for photo_id in collection_photos]
            if photo_media_group:
                for i in range(0, len(photo_media_group), 10):
                    await bot.send_media_group(admin_id, media=photo_media_group[i:i + 10])

            for file_id in receipt_files:
                file_info = await bot.get_file(file_id)
                if file_info.file_path and file_info.file_path.endswith('.pdf'):
                    await bot.send_document(admin_id, document=file_id, caption="üìÑ –ß–µ–∫ (PDF)")
                else:
                    await bot.send_photo(admin_id, photo=file_id, caption="üìÑ –ß–µ–∫ (–§–æ—Ç–æ)")

            await bot.send_message(admin_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    await send_email_with_files(
        bot=bot,
        caption=f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{submission_id} –æ—Ç @{username} (ID: {user_id})",
        file_ids=all_files
    )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞ ---
@router.callback_query(F.data.startswith("admin:"), IsAdmin())
async def process_admin_action(callback: CallbackQuery, bot: Bot, db_instance: DB, state: FSMContext):
    _, action, sub_id_str, user_id_str = callback.data.split(":")
    submission_id = int(sub_id_str)
    user_id = int(user_id_str)

    if action == "reject":
        await callback.answer()
        await state.update_data(submission_id=submission_id, user_id=user_id,
                                admin_message_id=callback.message.message_id)
        await state.set_state(AdminFSM.reject_reason)
        await callback.message.edit_text(
            f"–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É ‚Ññ{submission_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}?\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã.",
            reply_markup=get_rejection_keyboard()
        )
        return

    await callback.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

    actions = {
        "approve": ("approved", "–í—ã —Å—Ç–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ!"),
        "bonus": ("bonus",
                  "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏–∑! –ü—Ä–æ—Å—å–±–∞ —É—Ç–æ—á–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: –ê–¥—Ä–µ—Å, –§–ò–û, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    }

    if action in actions:
        status, text_for_user = actions[action]
        await db_instance.update_status(user_id, status)
        try:
            await bot.send_message(user_id, text_for_user)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await bot.send_message(callback.from_user.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        status_text = {"approve": "‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê", "bonus": "üéÅ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê –° –ë–û–ù–£–°–û–ú"}
        try:
            await callback.message.edit_text(
                f"‚úÖ –ó–∞—è–≤–∫–∞ ‚Ññ{submission_id} {status_text[action]}.",
                reply_markup=None
            )
        except Exception as e:
            logger.warning(f"Could not edit admin message for submission {submission_id}: {e}")
            await callback.message.answer(f"–ó–∞—è–≤–∫–∞ ‚Ññ{submission_id} {status_text[action]}.")


@router.message(AdminFSM.reject_reason, F.text)
async def process_rejection_reason(message: Message, state: FSMContext, bot: Bot, db_instance: DB):
    reason = message.text
    data = await state.get_data()
    user_id = data['user_id']
    submission_id = data['submission_id']
    admin_message_id = data['admin_message_id']

    await db_instance.update_status(user_id, "rejected")
    rejection_message = (
        "–û–π, –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.\n\n"
        f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n\n"
        "–ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞—á–∞–≤ —Å –∫–æ–º–∞–Ω–¥—ã /start."
    )
    try:
        await bot.send_message(user_id, rejection_message)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ –ø—Ä–∏—á–∏–Ω–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {e}")

    await bot.edit_message_text(
        f"‚ùå –ó–∞—è–≤–∫–∞ ‚Ññ{submission_id} –û–¢–ö–õ–û–ù–ï–ù–ê. –ü—Ä–∏—á–∏–Ω–∞ —É–∫–∞–∑–∞–Ω–∞.",
        chat_id=message.from_user.id,
        message_id=admin_message_id,
        reply_markup=None
    )
    await state.clear()


@router.callback_query(AdminFSM.reject_reason, F.data == "reject_no_reason")
async def process_rejection_no_reason(callback: CallbackQuery, state: FSMContext, bot: Bot, db_instance: DB):
    await callback.answer()
    data = await state.get_data()
    user_id = data['user_id']
    submission_id = data['submission_id']

    await db_instance.update_status(user_id, "rejected")
    rejection_message = "–û–π, –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–æ—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ —á–µ–∫–æ–≤ –±—ã–ª–∏ –Ω–µ—á–µ—Ç–∫–∏–º–∏. –ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞—á–∞–≤ —Å –∫–æ–º–∞–Ω–¥—ã /start."
    try:
        await bot.send_message(user_id, rejection_message)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")

    await callback.message.edit_text(
        f"‚ùå –ó–∞—è–≤–∫–∞ ‚Ññ{submission_id} –û–¢–ö–õ–û–ù–ï–ù–ê. –ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã.",
        reply_markup=None
    )
    await state.clear()


# --- –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏ ---
@router.message(Command("add_admin"), IsMainAdmin())
async def cmd_add_admin(message: Message, command: CommandObject, db_instance: DB):
    if not command.args or not command.args.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: `/add_admin 12345678`")
        return

    admin_id_to_add = int(command.args)
    await db_instance.add_admin(admin_id_to_add)
    await message.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID `{admin_id_to_add}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")


@router.message(Command("remove_admin"), IsMainAdmin())
async def cmd_remove_admin(message: Message, command: CommandObject, db_instance: DB):
    if not command.args or not command.args.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: `/remove_admin 12345678`")
        return

    admin_id_to_remove = int(command.args)
    if admin_id_to_remove == MAIN_ADMIN_ID:
        await message.answer("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await db_instance.remove_admin(admin_id_to_remove)
    await message.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID `{admin_id_to_remove}` —É–¥–∞–ª–µ–Ω.")


@router.message(Command("list_admins"), IsMainAdmin())
async def cmd_list_admins(message: Message, db_instance: DB):
    admins = await db_instance.get_all_admins()

    text = f"<b>–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b>\n- `{MAIN_ADMIN_ID}`\n\n<b>–î—Ä—É–≥–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:</b>\n"
    other_admins = [f"- `{admin_id}`" for admin_id in admins if admin_id != MAIN_ADMIN_ID]
    if other_admins:
        text += "\n".join(other_admins)
    else:
        text += "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."

    await message.answer(text)


# --- –≠–∫—Å–ø–æ—Ä—Ç ---
@router.message(Command("get_users_db"), IsAdmin())
async def cmd_get_users_db(message: Message, bot: Bot, db_instance: DB):
    wait_message = await message.answer("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    try:
        column_names, rows = await db_instance.get_all_participants_data()
        if not rows:
            await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
            return

        csv_buffer = await generate_participants_csv(column_names, rows, bot)
        filename_timestamp = datetime.now().strftime("%d.%m.%Y_%H:%M")
        file_name = f"database_chocowow_{filename_timestamp}.csv"

        await bot.send_document(
            chat_id=message.chat.id,
            document=BufferedInputFile(csv_buffer.getvalue(), filename=file_name),
            caption="–í–æ—Ç –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:"
        )
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        await wait_message.delete()


# --- –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
async def send_reminder_job(bot: Bot, db_instance: DB):
    users = await db_instance.get_approved_users()
    text = "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–π–¥–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à –ø—Ä–∏–∑–æ–≤! üèÜ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º —Ç–≥ –∫–∞–Ω–∞–ª–µ ______"
    count = 0
    for user_id in users:
        try:
            await bot.send_message(user_id, text)
            count += 1
            await asyncio.sleep(0.1)
        except Exception:
            pass
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π.")


@router.message(Command("send_raffle_reminder"), IsAdmin())
async def cmd_send_raffle_reminder(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ?", reply_markup=get_schedule_keyboard())
    await state.set_state(AdminFSM.awaiting_reminder_schedule)


@router.callback_query(AdminFSM.awaiting_reminder_schedule, F.data == "send_now")
async def process_reminder_send_now(callback: CallbackQuery, bot: Bot, db_instance: DB, state: FSMContext):
    await callback.message.edit_text("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    await send_reminder_job(bot, db_instance)
    await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    await state.clear()


@router.callback_query(AdminFSM.awaiting_reminder_schedule, F.data == "send_schedule")
async def process_reminder_schedule(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `14.07.2025 15:30`).")


@router.message(AdminFSM.awaiting_reminder_schedule, F.text)
async def process_reminder_time(message: Message, state: FSMContext, scheduler: AsyncIOScheduler, bot: Bot,
                                db_instance: DB):
    try:
        scheduled_time = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        scheduler.add_job(send_reminder_job, 'date', run_date=scheduled_time, args=[bot, db_instance])
        await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {scheduled_time.strftime('%d.%m.%Y –≤ %H:%M')}.")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`.")
    finally:
        await state.clear()


# --- –†–∞—Å—Å—ã–ª–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
async def send_results_job(bot: Bot, db_instance: DB, results_link: str):
    users = await db_instance.get_approved_users()
    text = f"–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ —Å—Å—ã–ª–∫–µ: {results_link}"
    count = 0
    for user_id in users:
        try:
            await bot.send_message(user_id, text)
            count += 1
            await asyncio.sleep(0.1)
        except Exception:
            pass
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π.")


@router.message(Command("send_results"), IsAdmin())
async def cmd_send_results(message: Message, state: FSMContext, command: CommandObject):
    if not command.args:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. \n–ü—Ä–∏–º–µ—Ä: `/send_results https://t.me/your_channel/123`")
        return

    await state.clear()
    await state.update_data(results_link=command.args)
    await message.answer("–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞?", reply_markup=get_schedule_keyboard())
    await state.set_state(AdminFSM.awaiting_results_schedule)


@router.callback_query(AdminFSM.awaiting_results_schedule, F.data == "send_now")
async def process_results_send_now(callback: CallbackQuery, bot: Bot, db_instance: DB, state: FSMContext):
    data = await state.get_data()
    link = data.get("results_link")

    await callback.message.edit_text("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    await send_results_job(bot, db_instance, link)
    await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    await state.clear()


@router.callback_query(AdminFSM.awaiting_results_schedule, F.data == "send_schedule")
async def process_results_schedule(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `14.07.2025 15:30`).")


@router.message(AdminFSM.awaiting_results_schedule, F.text)
async def process_results_time(message: Message, state: FSMContext, scheduler: AsyncIOScheduler, bot: Bot,
                               db_instance: DB):
    data = await state.get_data()
    link = data.get("results_link")

    try:
        scheduled_time = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        scheduler.add_job(send_results_job, 'date', run_date=scheduled_time, args=[bot, db_instance, link])
        await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {scheduled_time.strftime('%d.%m.%Y –≤ %H:%M')}.")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`.")
    finally:
        await state.clear()