# handlers/admin_handlers.py

import asyncio
import logging
from aiogram import Router, F, Bot
from aiogram.filters import Command, BaseFilter
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, BufferedInputFile  # –ò—Å–ø–æ–ª—å–∑—É–µ–º BufferedInputFile
from aiogram.exceptions import TelegramBadRequest
from datetime import datetime  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º datetime –¥–ª—è –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞

from config import ADMIN_IDS
from database.database import Database as DB
from keyboards.inline import get_admin_keyboard
from utils.email_sender import send_email_with_photos
from utils.export_data import generate_participants_csv  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV

router = Router()

logger = logging.getLogger(__name__)


# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
class IsAdmin(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id in ADMIN_IDS


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∞–º
async def send_submission_to_admin(bot: Bot, submission_id: int, user_id: int, username: str, collection_photo: str,
                                   receipt_photo: str):
    caption_for_text_message = (
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{submission_id}\n"
        f"–û—Ç: @{username} (ID: {user_id})\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    keyboard = get_admin_keyboard(submission_id, user_id)

    media_group = [
        InputMediaPhoto(media=collection_photo, caption="–§–æ—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"),
        InputMediaPhoto(media=receipt_photo, caption="–§–æ—Ç–æ —á–µ–∫–æ–≤")
    ]

    for admin_id in ADMIN_IDS:
        try:
            await bot.send_media_group(admin_id, media=media_group)
            await bot.send_message(admin_id, caption_for_text_message, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Å —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∞–º (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
    await send_email_with_photos(
        bot=bot,
        caption=f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{submission_id} –æ—Ç @{username} (ID: {user_id})",
        file_ids=[collection_photo, receipt_photo]
    )


@router.callback_query(F.data.startswith("admin:"))
async def process_admin_action(callback: CallbackQuery, bot: Bot, db_instance: DB):
    await callback.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return

    _, action, sub_id, user_id_str = callback.data.split(":")
    submission_id = int(sub_id)
    user_id = int(user_id_str)

    actions = {
        "approve": ("approved", "–í—ã —Å—Ç–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞!"),
        "bonus": ("bonus", "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏–∑!"),
        "reject": ("rejected", "–í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /start")
    }

    if action in actions:
        status, text_for_user = actions[action]
        await db_instance.update_status(user_id, status)
        try:
            await bot.send_message(user_id, text_for_user)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await bot.send_message(callback.from_user.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        status_text = {"approve": "–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê", "bonus": "–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê –° –ë–û–ù–£–°–û–ú", "reject": "–û–¢–ö–õ–û–ù–ï–ù–ê"}

        try:
            await callback.message.edit_text(
                text=f"‚úÖ –ó–∞—è–≤–∫–∞ ‚Ññ{submission_id} {status_text[action]}.",
                reply_markup=None
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ —É–∂–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∑–∞—è–≤–∫–∏ {submission_id}.")
            else:
                raise e
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ {submission_id}: {e}")


# --- –ö–û–ú–ê–ù–î–ê: –≠–ö–°–ü–û–†–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–• ---
@router.message(Command("get_users_db"), IsAdmin())
async def cmd_get_users_db(message: Message, bot: Bot, db_instance: DB):
    await message.answer("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î (—É–∂–µ –±–µ–∑ address, phone, full_name –±–ª–∞–≥–æ–¥–∞—Ä—è –∏–∑–º–µ–Ω–µ–Ω–∏—é –≤ database.py)
        column_names, rows = await db_instance.get_all_participants_data()

        if not rows:
            await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV-—Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –æ–±—ä–µ–∫—Ç bot –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è file_path
        csv_buffer = await generate_participants_csv(column_names, rows, bot)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        now = datetime.now()
        # –ü—Ä–∏–º–µ—Ä: "11 07 2025 16_53" (–¥–µ–Ω—å –º–µ—Å—è—Ü –≥–æ–¥ —á–∞—Å—ã_–º–∏–Ω—É—Ç—ã)
        filename_timestamp = now.strftime("%d %m %Y %H_%M")
        file_name = f"participants_{filename_timestamp}.csv"

        await bot.send_document(
            chat_id=message.chat.id,
            document=BufferedInputFile(csv_buffer.getvalue(), filename=file_name),
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º BufferedInputFile –∏ –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            caption="–í–æ—Ç –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:"
        )
        await message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {e}")


@router.message(Command("sendreminder"), IsAdmin())
async def cmd_send_reminder(message: Message, bot: Bot, db_instance: DB):
    users = await db_instance.get_approved_users()
    text = "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–π–¥–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à –ø—Ä–∏–∑–æ–≤! üèÜ"
    count = 0
    for user_id in users:
        try:
            await bot.send_message(user_id, text)
            count += 1
            await asyncio.sleep(0.1)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            pass
    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π.")